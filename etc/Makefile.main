## little hack to avoid troubles with cygwin pathes
ifeq ($(findstring CYGWIN,$(shell uname)),)
  cygpath ?= ${1}
else
  cygpath = $(shell cygpath -m -w ${1})
endif

## MAKEFILE_LIST ends with this file path => deduce AMM root directory
#MAKE_MAKE_DIR := $(call cygpath,$(abspath $(realpath $(dir $(lastword ${MAKEFILE_LIST}))/..))/)
MAKE_MAKE_DIR := $(dir $(lastword ${MAKEFILE_LIST}))/../

## MAKEFILE_LIST n-1'th item is caller Makefile => deduce caller project dir
##CALLER_DIR := $(call cygpath,$(dir $(realpath $(lastword $(filter-out $(lastword ${MAKEFILE_LIST}),${MAKEFILE_LIST})))))
CALLER_DIR := $(dir $(lastword $(filter-out $(lastword ${MAKEFILE_LIST}),${MAKEFILE_LIST})))

## PROJECT_NAME may be already defined, else, use project dirname
PROJECT_NAME ?= $(notdir $(realpath ${CALLER_DIR}))

$(info ** ArduinoMakeMaker:Makefile.main in ${MAKE_MAKE_DIR} called from ${CALLER_DIR} for project name ${PROJECT_NAME} **)

## verify that ARDUINO_IDE and TARGET_BOARD are defined
ifeq (${ARDUINO_IDE},)
  ## TODO : auto discover arduino default install path, according on architecture
  $(error ARDUINO_IDE is not defined)
endif
export ARDUINO_IDE
ifeq (${TARGET_BOARD},)
  $(error TARGET_BOARD is not defined)
endif

## deduce target dir
TARGET_DIR := ${CALLER_DIR}/target/${TARGET_BOARD}
${TARGET_DIR}:
	mkdir -p ${TARGET_DIR}

## deduce in and out file names
ifeq (${MAKECMDGOALS},lib)
  OUT_NAME ?= lib$(notdir $(basename ${MAIN_SOURCE})).a
endif
ifneq ($(findstring ${MAKECMDGOALS},bin upload console),)
  MAIN_SOURCE ?= $(wildcard ${CALLER_DIR}/${PROJECT_NAME}.ino ${CALLER_DIR}/${PROJECT_NAME}.cpp ${CALLER_DIR}/${PROJECT_NAME}.c \
		$(CALLER_DIR)/main.ino ${CALLER_DIR}/main.cpp ${CALLER_DIR}/main.c)
  OUT_NAME ?= $(notdir $(basename ${MAIN_SOURCE})).hex
endif

ifeq (${OUT_NAME},)
  $(error Can't find main destination file. Caller must specify which one to use)
endif
ifneq ($(words ${OUT_NAME}),1)
  $(error Several files may be destination. Caller must specify which one to use)
endif

OUT_PATH := ${TARGET_DIR}/${OUT_NAME}

## find this makefile parent dir, to deduce where jar and generated rules are
GENERATED_RULES_DIR := ${MAKE_MAKE_DIR}/generated

MAKE_MAKE := ${MAKE_MAKE_DIR}/etc/mkmk.sh

bin: ${OUT_PATH} ${OUT_PATH:%.hex=%.size} | ${CORE_LIB} ${TARGET_DIR}
lib: ${OUT_PATH} | ${CORE_LIB} ${TARGET_DIR}

${CORE_LIB}:
	${MAKE} -C ${MAKE_MAKE_DIR} -f etc/Makefile.core

.PHONY: bin lib

## look for target specific Makefile, or generate it
TARGET_MAKEFILE=${MAKE_MAKE_DIR}/target/${TARGET_BOARD}/Makefile
${TARGET_MAKEFILE} :
	${MAKE_MAKE} --board ${TARGET_BOARD} --output ${TARGET_MAKEFILE}

-include ${GENERATED_RULES_DIR}/Makefile.target.${TARGET_BOARD}
