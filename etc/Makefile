# TODO ...

MAKEFILE_DIR := $(patsubst %/,%, $(dir $(realpath ${MAKEFILE_LIST})))

# deduce some info from source directory
PROJECT_DIR := ${CURDIR}
$(info running from ${PROJECT_DIR})

PROJECT_NAME:= $(notdir ${PROJECT_DIR})
PROJECT_MAIN ?= ${PROJECT_NAME}
MAIN_SOURCE := ${PROJECT_MAIN}.ino

BUILD_PATH := ${PROJECT_DIR}/build

# allow user to add :
# - specific options to arduino-cli compile (ARDUINO_CLI_COMPILE_OPTS) and upload (ARDUINO_CLI_UPLOAD_OPTS) commands
# - default values to BOARD, PORT and BAUDRATE (but command line may override them)
# - MAIN_SOURCE, BUILD_PATH (why not ?)
-include makefile.def

# deduce board and port if not defined from environment variables or command line
ifneq "" "$(wildcard ${BUILD_PATH}/sketch.json)"
    BOARD ?= $(shell jq -r .cpu.fqbn < ${BUILD_PATH}/sketch.json)
endif
ifeq "" "${BOARD}"
    $(error BOARD variable must be defined)
endif
BOARD_DOT := $(subst :,.,${BOARD})

PORT ?= $(shell arduino-cli board list --format json | jq --arg BOARD ${BOARD} -r \
  'map({ a:.address, f: .boards | map(.FQBN)[] | select(.==$$BOARD) }) | map(.a)[]' )
UPLOAD_PORT ?= ${PORT}
BAUDRATE ?= 115200

LIBRARY_PATH_OPTS = $(patsubst %,--libraries %,${LIBRARY_PATH})

ARDUINO_DATA ?= $(shell arduino-cli config dump --format json | jq -r .arduino_data)
HARDWARE ?= ${ARDUINO_DATA}/packages

$(info Using board=${BOARD} port=${PORT} upload port=${UPLOAD_PORT} baudrate=${BAUDRATE} source=${MAIN_SOURCE})

HEX_FILE := ${BUILD_PATH}/$(notdir ${MAIN_SOURCE}).hex
CPP_FILE := ${BUILD_PATH}/sketch/$(notdir ${MAIN_SOURCE}).cpp
OBJ_FILE := ${BUILD_PATH}/sketch/$(notdir ${MAIN_SOURCE}).cpp.o
DEP_FILE := ${BUILD_PATH}/sketch/$(notdir ${MAIN_SOURCE}).cpp.d
EMPTY_FILE := ${BUILD_PATH}/empty.cpp
PROPS_FILE := ${BUILD_PATH}/${BOARD_DOT}.properties
INCLS_FILE := ${BUILD_PATH}/${BOARD_DOT}.includes
MACRO_FILE := ${BUILD_PATH}/${BOARD_DOT}.macros

# rules

.PHONY: clean compile upload console macros includes eclipse

all: compile


## generate a file with all arduino properties
${PROPS_FILE}: | ${BUILD_PATH} ${EMPTY_FILE}
	arduino-cli compile --show-properties --fqbn ${BOARD} ${EMPTY_FILE} \
	| sed 's/{/$${/g' \
	> ${PROPS_FILE}
	echo '$$(info IN PROPS)' >> ${PROPS_FILE}

## then include it
include ${PROPS_FILE}

## some variables refered to in properties file are not defined;
## some are useless for us, but some must be defined "manually"
#	archive_file
#	bootloader.verbose
#	build.pid
#	build.usb_product
#	build.vid
#	cmd.path
#	codecomplete
#	config.path
#	erase.verbose
# includes defined by "INCLS_FILE" rule
#	network_cmd
#	object_file
#	object_files
#	path
# force "gcc -E" to send its output to stdout
preprocessed_file_path:=-
#	program.extra_params
#	program.verbose
#	program.verify
#	protocol
#	runtime.tools.arduino-preprocessor.path
#	serial.port
# needed to call "gcc -E"
source_file:=${EMPTY_FILE}
#	upload.network.endpoint_reset
#	upload.network.endpoint_sync
#	upload.network.endpoint_upload
#	upload.network.port
#	upload.network.sync_return
#	upload.verbose
#	upload.verify

## generate a file with include path
${INCLS_FILE}.lst ${INCLS_FILE}: ${BUILD_PATH}/includes.cache ${PROPS_FILE} | ${BUILD_PATH}
	jq -r 'map(.Includepath)[] | select (. != null)' ${BUILD_PATH}/includes.cache \
	> ${INCLS_FILE}.lst
	echo "${runtime.tools.avr-gcc.path}/avr/include" >> ${INCLS_FILE}.lst
	echo "includes:=$$( \
	  sed 's/^/-I/' ${INCLS_FILE}.lst \
	  | tr '\n' ' ' \
	)" > ${INCLS_FILE}

#-include ${INCLS_FILE}

## if there are syntax errors in source file DEP_FILE isn't generated by
## compilation, and include below loops forever
## => no dependency on this file, it's included only if it exists already

-include ${DEP_FILE}

clean:
	[ -d ${BUILD_PATH} ] && rm -rf ${BUILD_PATH}/*

${BUILD_PATH}:
	mkdir -p ${BUILD_PATH}

${EMPTY_FILE}:
	> ${EMPTY_FILE}

# rule to be called by IDE to define source indexes
macros: ${MACRO_FILE}
${MACRO_FILE}: ${PROPS_FILE} | ${EMPTY_FILE}
	${recipe.preproc.includes:-M=-E -dM} -o ${MACRO_FILE}.tmp
	${MAKEFILE_DIR}/filterTypes.sh ${MACRO_FILE}.tmp > ${MACRO_FILE}
	cat ${MACRO_FILE}.tmp >> ${MACRO_FILE}

includes: ${INCLS_FILE}
	echo ${includes}

eclipse: eclipse.settings.xml
eclipse.settings.xml: ${INCLS_FILE}.lst ${MACRO_FILE}
	${MAKEFILE_DIR}/eclipseSettings.sh ${INCLS_FILE}.lst ${MACRO_FILE} > eclipse.settings.xml

${CPP_FILE} \
${BUILD_PATH}/includes.cache : ${MAIN_SOURCE} | ${BUILD_PATH}
	arduino-cli compile ${LIBRARY_PATH_OPTS} \
		--fqbn ${BOARD} --build-cache-path ${BUILD_PATH} --build-path ${BUILD_PATH} \
		--preprocess ${ARDUINO_CLI_COMPILE_OPTS} ${MAIN_SOURCE} > /dev/null

${HEX_FILE} \
${OBJ_FILE} : ${MAIN_SOURCE} | ${BUILD_PATH}
	arduino-cli compile ${LIBRARY_PATH_OPTS} \
		--fqbn ${BOARD} --build-cache-path ${BUILD_PATH} --build-path ${BUILD_PATH} \
		${ARDUINO_CLI_COMPILE_OPTS} ${MAIN_SOURCE}

compile: ${HEX_FILE}

upload : | ${HEX_FILE}
	arduino-cli upload --fqbn ${BOARD} --port ${UPLOAD_PORT} -i ${HEX_FILE} ${ARDUINO_CLI_UPLOAD_OPTS}

console:
	${MAKEFILE_DIR}/console.sh --boardname ${BOARD} --port ${PORT} --upload-port ${UPLOAD_PORT} -s ${BAUDRATE} ${ARDDUDE_OPTIONS} -f ${HEX_FILE}
